name: Publish Library on Push

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-libraries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Detect changed files
        id: changed-files
        uses: tj-actions/changed-files@v46

      - name: Build and publish changed modules
        run: |
          declare -A changed_modules

          # Duy·ªát qua danh s√°ch file thay ƒë·ªïi
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            module=${file%%/*}  # L·∫•y th∆∞ m·ª•c g·ªëc c·ªßa file

            echo "Detected change in: $module"

            # Ch·ªâ th√™m v√†o n·∫øu n√≥ l√† module h·ª£p l·ªá (ch·ª©a build.gradle ho·∫∑c build.gradle.kts)
            if [[ -d $module && (-f "$module/build.gradle" || -f "$module/build.gradle.kts") ]]; then
              changed_modules[$module]=$module
            fi
          done

          # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ module n√†o thay ƒë·ªïi th√¨ tho√°t
          if [[ ${#changed_modules[@]} -eq 0 ]]; then
            echo "No modules changed, skipping deployment."
            exit 0
          fi

          # Build v√† publish t·ª´ng module t·ª´ th∆∞ m·ª•c root
          for module in "${!changed_modules[@]}"; do
            echo "üì¶ Deploying module: $module"

            # Ch·∫°y Gradle t·ª´ th∆∞ m·ª•c root, ch·ªâ ƒë·ªãnh module v·ªõi -p
            ./gradlew -p $module clean build publishToNexusRepo || { echo "‚ùå Error: Gradle build failed for $module"; exit 1; }

            echo "‚úÖ Published $module to Nexus"
          done
