import java.text.SimpleDateFormat

plugins {
	id 'java'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'org.springframework.boot' version '3.2.3' apply false
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'maven-publish'
	id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

allprojects {
	group = 'com.preschool.libraries'

	// Timestamp versioning
	def dateFormat = new SimpleDateFormat("yyyyMMdd.HHmm")
	def timestamp = dateFormat.format(new Date())
	def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
	def commit = 'git rev-parse --short HEAD'.execute().text.trim()

	version = "${timestamp}-${branch}-${commit}-SNAPSHOT"

	ext {
		set('springCloudVersion', "2024.0.0")
	}
}

nexusPublishing {
	repositories {
		nexusRepo {
			nexusUrl = uri("http://nexus.pisolution.vn/repository/maven-releases/")
			snapshotRepositoryUrl = uri("http://nexus.pisolution.vn/repository/maven-snapshots/")
			allowInsecureProtocol = true
			username = project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
			password = project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'org.sonarqube'
	apply plugin: 'maven-publish'

	sonar {
		properties {
			property "sonar.sources", "src/main"
		}
	}

	bootJar {
		enabled = false
	}

	sourceCompatibility = JavaVersion.VERSION_21

	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "http://nexus.pisolution.vn/repository/maven-public/"
			allowInsecureProtocol = true
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				groupId = project.group
				artifactId = project.name
				version = rootProject.version
			}
		}

		repositories {
			maven {
				url = rootProject.hasProperty('release') && rootProject.property('release') == 'true' ?
						uri("http://nexus.pisolution.vn/repository/maven-releases/") :
						uri("http://nexus.pisolution.vn/repository/maven-snapshots/")
				allowInsecureProtocol = true
				credentials {
					username = project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
					password = project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
				}
			}
		}
	}

	spotless {
		java {
			target 'src/main/java/**/*.java'  // Explicitly target source files
			importOrder()
			removeUnusedImports()
			googleJavaFormat('1.20.0')
			indentWithSpaces(4)
			endWithNewline()
		}
	}

	// Ensure compileJava depends on spotlessApply
	tasks.named('compileJava') {
		dependsOn tasks.named('spotlessApply')
	}

	dependencies {
		implementation 'org.slf4j:slf4j-api:2.0.12'
		compileOnly 'org.projectlombok:lombok:1.18.30'
		annotationProcessor 'org.projectlombok:lombok:1.18.30'
		annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
		implementation 'org.mapstruct:mapstruct:1.5.2.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
		implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.2'
		implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'
		implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	test {
		useJUnitPlatform()
	}
}